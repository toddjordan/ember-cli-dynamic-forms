<h2>Validation</h2>

<p>This form uses a validator to ensure the age of the person allows them to choose beer as a beverage.</p>
{{dynamic-form schema=model.basicValidation}}

<hr/>

<p>The ember-cli-dynamic-forms addon provides you with a way to define and apply reusable validations to your dynamic forms.  All you have to do is drop a JavaScript file in the <code>/app/dynamic-forms/validations</code> directory and its made available to your form as a validator, which can be applied to a form field, as it is updated.</p>
<p>Start by creating a custom validation using the ember-cli validation blueprint generate command:</p>

<p><code>ember g dynamic-form-validator drinking-age</code>  ... which will generate the file <code>/app/dynamic-forms/validations/drinking-age.js</code></p>

<p>Now, validate that the age provided is appropriate when beer is selected:</p>

{{#highlight-js}}
<pre>/app/dynamic-forms/validations/drinking-age.js<code>import Ember from 'ember';

export default Ember.Object.extend({

  validate(callback) {
    var value = this.getValue();
    var age = this.getParent().childrenByPropertyId["age"].getValue();
    if ((value === "beer" || value === "wine") && age &gt; 21) {
      callback({"status": false, "message": "You are too young to drink alcohol!"});
      return;
    }
  }
});
</code></pre>
{{/highlight-js}}

<p>Adding <code>drinking-age</code> to that directory will make that validation available as "drinking-age" within your form schema under the validator key.</p>
<p>In the example below we are validating that you are the correct age if you pick beer as your preferred beverage.</p>

{{#highlight-js}}
<pre>/app/routes/demos/validation.js<code>import Ember from 'ember';

const basicValidation = {
  "schema": {
    "type": "object",
    "properties": {
      "name": {
        "type": "string"
      },
      "age": {
        "type": "number",
        "minimum": 0
      },
      "beverage": {
        "type": "string",
        "enum": ["water", "soda", "beer", "wine"]
      }
    }
  },
  "options": {
    "fields": {
      "name": {
        "label": "Name",
        "events": {
          "change": "lower-case"
        }
      },
      "age": {
        "label": "Age",
        "type": "integer",
        "slider": true
      },
      "beverage": {
        "label": "Choice of Beverage",
        "slider": true,
        "validator": "drinking-age"
      }
    }
  }
};

export default Ember.Route.extend({
  model() {
    return Ember.Object.create({ basicValidation });
  }
});
</code></pre>
{{/highlight-js}}

<p>We use our dynamic-form component as we normally would, passing in the schema object.</p>

{{#highlight-js}}
  <pre>/app/templates/demos/validation.hbs<code>\{{dynamic-form schema=model.basicValidation}}</code></pre>
{{/highlight-js}}
